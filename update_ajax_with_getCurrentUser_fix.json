{
  "script": "/**\n * Planning Poker Ajax Script Processor\n * Handles all AJAX requests from the unified planning poker interface\n * \n * @type {ScriptInclude}\n * @name PlanningPokerAjax\n * @scope x_1447726_planni_0\n * @description Unified Planning Poker AJAX processor for all interface operations\n */\n\nvar PlanningPokerAjax = Class.create();\nPlanningPokerAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\n    \n    /**\n     * Get current user information\n     */\n    getCurrentUser: function() {\n        try {\n            var user = gs.getUser();\n            \n            // More defensive - check if user methods exist\n            if (!user) {\n                gs.error('PlanningPokerAjax.getCurrentUser: gs.getUser() returned null');\n                return JSON.stringify({\n                    sys_id: gs.getUserID() || 'unknown',\n                    user_name: gs.getUserName() || 'unknown',\n                    display_name: gs.getUserDisplayName() || 'User',\n                    email: ''\n                });\n            }\n            \n            var userData = {\n                sys_id: user.getID() || gs.getUserID() || 'unknown',\n                user_name: user.getUserName() || gs.getUserName() || 'unknown',\n                display_name: user.getDisplayName() || gs.getUserDisplayName() || 'User',\n                email: user.getEmail() || ''\n            };\n            \n            gs.info('PlanningPokerAjax.getCurrentUser: Returning user data for ' + userData.user_name);\n            \n            return JSON.stringify(userData);\n        } catch (e) {\n            gs.error('PlanningPokerAjax.getCurrentUser: Error - ' + e.message);\n            // Return fallback data\n            return JSON.stringify({\n                sys_id: gs.getUserID() || 'unknown',\n                user_name: gs.getUserName() || 'unknown',\n                display_name: gs.getUserDisplayName() || 'User',\n                email: ''\n            });\n        }\n    },\n    \n    /**\n     * Get all active groups for group selection\n     */\n    getAllGroups: function() {\n        var groupGR = new GlideRecord('sys_user_group');\n        groupGR.addQuery('active', true);\n        groupGR.orderBy('name');\n        groupGR.setLimit(100); // Limit for performance\n        groupGR.query();\n        \n        var groups = [];\n        while (groupGR.next()) {\n            groups.push({\n                sys_id: groupGR.sys_id.toString(),\n                name: groupGR.name.toString(),\n                description: groupGR.description.toString() || '',\n                type: groupGR.type.toString() || ''\n            });\n        }\n        \n        return JSON.stringify({\n            success: true,\n            groups: groups\n        });\n    },\n    \n    /**\n     * Get all users for participant selection\n     */\n    getAllUsers: function() {\n        var userGR = new GlideRecord('sys_user');\n        userGR.addQuery('active', true);\n        userGR.addQuery('user_name', '!=', 'guest');\n        userGR.addQuery('user_name', '!=', 'admin');\n        userGR.orderBy('name');\n        userGR.setLimit(50); // Limit for performance\n        userGR.query();\n        \n        var users = [];\n        while (userGR.next()) {\n            users.push({\n                sys_id: userGR.sys_id.toString(),\n                name: userGR.name.toString(),\n                email: userGR.email.toString(),\n                user_name: userGR.user_name.toString()\n            });\n        }\n        \n        return JSON.stringify({\n            success: true,\n            users: users\n        });\n    },\n    \n    /**\n     * Get all available scoring methods\n     */\n    getScoringMethods: function() {\n        var scoringGR = new GlideRecord('x_1447726_planni_0_scoring_method');\n        scoringGR.addQuery('active', true);\n        scoringGR.orderBy('name');\n        scoringGR.query();\n        \n        var methods = [];\n        while (scoringGR.next()) {\n            methods.push({\n                value: scoringGR.sys_id.toString(),\n                label: scoringGR.name.toString() + ' (' + scoringGR.values.toString() + ')',\n                values: scoringGR.values.toString(),\n                description: scoringGR.description.toString()\n            });\n        }\n        \n        return JSON.stringify({\n            success: true,\n            methods: methods\n        });\n    },\n    \n    /**\n     * Get all active sessions\n     */\n    getAllSessions: function() {\n        var sessionGR = new GlideRecord('x_1447726_planni_0_planning_session');\n        sessionGR.addQuery('status', '!=', 'closed');\n        sessionGR.orderByDesc('sys_created_on');\n        sessionGR.query();\n        \n        var sessions = [];\n        while (sessionGR.next()) {\n            // Count participants (simplified - could be from a participants table)\n            var participantCount = this._getParticipantCount(sessionGR.sys_id.toString());\n            \n            // Get scoring method name\n            var scoringMethodName = 'Unknown';\n            if (sessionGR.scoring_method) {\n                var scoringGR = new GlideRecord('x_1447726_planni_0_scoring_method');\n                if (scoringGR.get(sessionGR.scoring_method)) {\n                    scoringMethodName = scoringGR.name.toString();\n                }\n            }\n            \n            sessions.push({\n                sys_id: sessionGR.sys_id.toString(),\n                session_code: sessionGR.session_code.toString(),\n                title: sessionGR.name.toString(),\n                description: sessionGR.description.toString(),\n                status: sessionGR.status.toString(),\n                created_by_name: sessionGR.facilitator.getDisplayValue(),\n                scoring_method_name: scoringMethodName,\n                participant_count: participantCount,\n                story_count: this._getStoryCount(sessionGR.sys_id.toString()),\n                sys_created_on: sessionGR.sys_created_on.getDisplayValue()\n            });\n        }\n        \n        return JSON.stringify({\n            success: true,\n            sessions: sessions\n        });\n    },\n    \n    /**\n     * Create a new planning session\n     */\n    createSession: function() {\n        var sessionDataStr = this.getParameter('sysparm_session_data');\n        if (!sessionDataStr) {\n            return this._errorResponse('Session data required');\n        }\n        \n        try {\n            var sessionData = JSON.parse(sessionDataStr);\n            \n            // Generate unique session code\n            var sessionCode = this._generateSessionCode();\n            \n            var sessionGR = new GlideRecord('x_1447726_planni_0_planning_session');\n            sessionGR.initialize();\n            sessionGR.name = sessionData.title || 'New Session';\n            sessionGR.description = sessionData.description || '';\n            sessionGR.session_code = sessionCode;\n            sessionGR.facilitator = gs.getUserID();\n            sessionGR.scoring_method = sessionData.scoring_method;\n            sessionGR.status = 'active';\n            var sessionId = sessionGR.insert();\n            \n            if (sessionId) {\n                // Create participant records from groups if provided\n                if (sessionData.groups && sessionData.groups.length > 0) {\n                    this._createSessionParticipantsFromGroups(sessionId, sessionData.groups);\n                }\n                // Or create from individual participants\n                else if (sessionData.participants && sessionData.participants.length > 0) {\n                    this._createSessionParticipants(sessionId, sessionData.participants);\n                }\n                \n                // Get the created session with populated fields\n                sessionGR.get(sessionId);\n                \n                var createdSession = {\n                    sys_id: sessionGR.sys_id.toString(),\n                    session_code: sessionGR.session_code.toString(),\n                    title: sessionGR.name.toString(),\n                    description: sessionGR.description.toString(),\n                    status: sessionGR.status.toString(),\n                    facilitator_name: sessionGR.facilitator.getDisplayValue(),\n                    scoring_method: sessionGR.scoring_method.toString(),\n                    scoring_method_name: sessionGR.scoring_method.getDisplayValue()\n                };\n                \n                return JSON.stringify({\n                    success: true,\n                    session: createdSession,\n                    role: 'facilitator',\n                    message: 'Session created successfully'\n                });\n            } else {\n                return this._errorResponse('Failed to create session');\n            }\n        } catch (e) {\n            return this._errorResponse('Invalid session data: ' + e.message);\n        }\n    },\n    \n    /**\n     * Join an existing session\n     */\n    joinSession: function() {\n        var sessionCode = this.getParameter('sysparm_session_code');\n        if (!sessionCode) {\n            return this._errorResponse('Session code required');\n        }\n        \n        var sessionGR = new GlideRecord('x_1447726_planni_0_planning_session');\n        sessionGR.addQuery('session_code', sessionCode);\n        sessionGR.addQuery('status', '!=', 'closed');\n        sessionGR.query();\n        \n        if (!sessionGR.next()) {\n            return this._errorResponse('Session not found or has ended');\n        }\n        \n        // Determine user role\n        var currentUserId = gs.getUserID();\n        var role = 'voter'; // default role\n        \n        if (currentUserId === sessionGR.facilitator.toString()) {\n            role = 'facilitator';\n        } else if (gs.hasRole('x_1447726_planni_0_observer')) {\n            role = 'observer';\n        }\n        \n        var sessionData = {\n            sys_id: sessionGR.sys_id.toString(),\n            session_code: sessionGR.session_code.toString(),\n            session_name: sessionGR.name.toString(),\n            description: sessionGR.description.toString(),\n            status: sessionGR.status.toString(),\n            facilitator_name: sessionGR.facilitator.getDisplayValue(),\n            scoring_method: sessionGR.scoring_method.toString(),\n            scoring_method_name: sessionGR.scoring_method.getDisplayValue(),\n            voting_status: this._getVotingStatus(sessionGR.sys_id.toString())\n        };\n        \n        return JSON.stringify({\n            success: true,\n            session: sessionData,\n            role: role\n        });\n    },\n    \n    /**\n     * Get comprehensive session data for active monitoring\n     */\n    getSessionData: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        if (!sessionId) {\n            return this._errorResponse('Session ID required');\n        }\n        \n        var sessionGR = new GlideRecord('x_1447726_planni_0_planning_session');\n        if (!sessionGR.get(sessionId)) {\n            return this._errorResponse('Session not found');\n        }\n        \n        // Get current story\n        var currentStory = this._getCurrentStory(sessionId);\n        \n        // Get participants\n        var participants = this._getSessionParticipants(sessionId);\n        \n        // Get voting status\n        var votingStatus = this._getVotingStatus(sessionId);\n        \n        var sessionData = {\n            session: {\n                sys_id: sessionGR.sys_id.toString(),\n                session_code: sessionGR.session_code.toString(),\n                session_name: sessionGR.name.toString(),\n                description: sessionGR.description.toString(),\n                status: sessionGR.status.toString(),\n                facilitator_name: sessionGR.facilitator.getDisplayValue(),\n                scoring_method: sessionGR.scoring_method.toString(),\n                scoring_method_name: sessionGR.scoring_method.getDisplayValue(),\n                voting_status: votingStatus\n            },\n            current_story: currentStory,\n            participants: participants\n        };\n        \n        return JSON.stringify(sessionData);\n    },\n    \n    /**\n     * Get scoring values for a scoring method\n     */\n    getScoringValues: function() {\n        var scoringMethodId = this.getParameter('sysparm_scoring_method_id');\n        if (!scoringMethodId) {\n            return this._errorResponse('Scoring method ID required');\n        }\n        \n        var scoringGR = new GlideRecord('x_1447726_planni_0_scoring_method');\n        if (!scoringGR.get(scoringMethodId)) {\n            return this._errorResponse('Scoring method not found');\n        }\n        \n        // Parse values (assuming comma-separated format like \"1,2,3,5,8,13,21,?\")\n        var valuesStr = scoringGR.values.toString();\n        var valueArray = valuesStr.split(',');\n        \n        var values = [];\n        for (var i = 0; i < valueArray.length; i++) {\n            var value = valueArray[i].trim();\n            if (value) {\n                values.push({\n                    value: value,\n                    display_value: value\n                });\n            }\n        }\n        \n        return JSON.stringify(values);\n    },\n    \n    /**\n     * Get session participants\n     */\n    getSessionParticipants: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        if (!sessionId) {\n            return this._errorResponse('Session ID required');\n        }\n        \n        var participants = this._getSessionParticipants(sessionId);\n        return JSON.stringify(participants);\n    },\n    \n    /**\n     * Start voting (facilitator only)\n     */\n    startVoting: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        \n        if (!this._isFacilitator(sessionId)) {\n            return this._errorResponse('Only facilitators can start voting');\n        }\n        \n        // For now, we'll just return success\n        // In a full implementation, you might update session status or story status\n        return JSON.stringify({\n            success: true,\n            message: 'Voting started successfully'\n        });\n    },\n    \n    /**\n     * Reveal votes (facilitator only)\n     */\n    revealVotes: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        \n        if (!this._isFacilitator(sessionId)) {\n            return this._errorResponse('Only facilitators can reveal votes');\n        }\n        \n        // Get voting results\n        var results = this._calculateVotingResults(sessionId);\n        \n        return JSON.stringify({\n            success: true,\n            results: results,\n            message: 'Votes revealed successfully'\n        });\n    },\n    \n    /**\n     * Reset voting (facilitator only)\n     */\n    resetVoting: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        \n        if (!this._isFacilitator(sessionId)) {\n            return this._errorResponse('Only facilitators can reset voting');\n        }\n        \n        // Clear votes for current story (simplified implementation)\n        // In reality, you'd clear votes from a votes table\n        \n        return JSON.stringify({\n            success: true,\n            message: 'Voting reset successfully'\n        });\n    },\n    \n    /**\n     * Move to next story (facilitator only)\n     */\n    nextStory: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        \n        if (!this._isFacilitator(sessionId)) {\n            return this._errorResponse('Only facilitators can move to next story');\n        }\n        \n        return JSON.stringify({\n            success: true,\n            message: 'Moved to next story successfully'\n        });\n    },\n    \n    /**\n     * Submit a vote\n     */\n    submitVote: function() {\n        var sessionId = this.getParameter('sysparm_session_id');\n        var voteValue = this.getParameter('sysparm_vote_value');\n        \n        if (!sessionId || !voteValue) {\n            return this._errorResponse('Session ID and vote value required');\n        }\n        \n        // For now, we'll just return success\n        // In a full implementation, you'd save the vote to a votes table\n        \n        return JSON.stringify({\n            success: true,\n            message: 'Vote submitted successfully'\n        });\n    },\n    \n    // ==================== HELPER METHODS ====================\n    \n    /**\n     * Get participant count for a session\n     */\n    _getParticipantCount: function(sessionId) {\n        var participantGR = new GlideRecord('x_1447726_planni_0_session_participant');\n        participantGR.addQuery('session', sessionId);\n        participantGR.query();\n        return participantGR.getRowCount();\n    },\n    \n    /**\n     * Get story count for a session\n     */\n    _getStoryCount: function(sessionId) {\n        var storyGR = new GlideRecord('x_1447726_planni_0_user_story');\n        storyGR.addQuery('session', sessionId);\n        storyGR.query();\n        return storyGR.getRowCount();\n    },\n    \n    /**\n     * Create session participants from groups\n     */\n    _createSessionParticipantsFromGroups: function(sessionId, groups) {\n        try {\n            for (var i = 0; i < groups.length; i++) {\n                var groupId = groups[i];\n                \n                // Get all users in the group\n                var groupMemberGR = new GlideRecord('sys_user_grmember');\n                groupMemberGR.addQuery('group', groupId);\n                groupMemberGR.query();\n                \n                while (groupMemberGR.next()) {\n                    var userId = groupMemberGR.user.toString();\n                    \n                    // Check if participant already exists (avoid duplicates)\n                    var existingGR = new GlideRecord('x_1447726_planni_0_session_participant');\n                    existingGR.addQuery('session', sessionId);\n                    existingGR.addQuery('user', userId);\n                    existingGR.query();\n                    \n                    if (!existingGR.hasNext()) {\n                        var participantGR = new GlideRecord('x_1447726_planni_0_session_participant');\n                        participantGR.initialize();\n                        participantGR.session = sessionId;\n                        participantGR.user = userId;\n                        participantGR.role = 'voter';\n                        participantGR.insert();\n                    }\n                }\n            }\n        } catch (e) {\n            gs.error('Error creating session participants from groups: ' + e.message);\n        }\n    },\n    \n    /**\n     * Create session participants\n     */\n    _createSessionParticipants: function(sessionId, participants) {\n        try {\n            for (var i = 0; i < participants.length; i++) {\n                var participant = participants[i];\n                var participantGR = new GlideRecord('x_1447726_planni_0_session_participant');\n                participantGR.initialize();\n                participantGR.session = sessionId;\n                participantGR.user = participant.user_id;\n                participantGR.role = participant.role;\n                participantGR.insert();\n            }\n        } catch (e) {\n            gs.error('Error creating session participants: ' + e.message);\n        }\n    },\n    \n    /**\n     * Get session participants\n     */\n    _getSessionParticipants: function(sessionId) {\n        var participants = [];\n        \n        // Get facilitator from session\n        var sessionGR = new GlideRecord('x_1447726_planni_0_planning_session');\n        if (sessionGR.get(sessionId)) {\n            participants.push({\n                sys_id: sessionGR.facilitator.toString(),\n                user_id: sessionGR.facilitator.toString(),\n                user_name: sessionGR.facilitator.getDisplayValue(),\n                role: 'facilitator',\n                has_voted: false\n            });\n        }\n        \n        // Get other participants from participants table\n        var participantGR = new GlideRecord('x_1447726_planni_0_session_participant');\n        participantGR.addQuery('session', sessionId);\n        participantGR.query();\n        \n        while (participantGR.next()) {\n            // Skip if this is the facilitator (already added above)\n            if (participantGR.user.toString() === sessionGR.facilitator.toString()) {\n                continue;\n            }\n            \n            participants.push({\n                sys_id: participantGR.sys_id.toString(),\n                user_id: participantGR.user.toString(),\n                user_name: participantGR.user.getDisplayValue(),\n                role: participantGR.role.toString(),\n                has_voted: this._hasUserVoted(sessionId, participantGR.user.toString())\n            });\n        }\n        \n        return participants;\n    },\n    \n    /**\n     * Check if user has voted in current story\n     */\n    _hasUserVoted: function(sessionId, userId) {\n        // Simplified - in a full implementation, you'd check the votes table\n        // for the current story and this user\n        return Math.random() > 0.5;\n    },\n    \n    /**\n     * Get current story for session\n     */\n    _getCurrentStory: function(sessionId) {\n        // Simplified implementation - return sample story\n        return {\n            sys_id: 'story_001',\n            story_title: 'User Authentication System',\n            story_description: 'As a user, I want to be able to log in securely so that I can access my personal dashboard.',\n            status: 'voting'\n        };\n    },\n    \n    /**\n     * Get voting status for session\n     */\n    _getVotingStatus: function(sessionId) {\n        // Simplified - return random status\n        var statuses = ['waiting', 'active', 'revealed'];\n        return statuses[Math.floor(Math.random() * statuses.length)];\n    },\n    \n    /**\n     * Calculate voting results\n     */\n    _calculateVotingResults: function(sessionId) {\n        // Simplified implementation - return sample results\n        var votes = [3, 5, 5, 8, 5, 3];\n        var sum = votes.reduce(function(a, b) { return a + b; }, 0);\n        var average = (sum / votes.length).toFixed(1);\n        \n        // Calculate median\n        var sortedVotes = votes.slice().sort(function(a, b) { return a - b; });\n        var median = sortedVotes[Math.floor(sortedVotes.length / 2)];\n        \n        // Check consensus (simplified - all votes within 2 points)\n        var min = Math.min.apply(Math, votes);\n        var max = Math.max.apply(Math, votes);\n        var consensus = (max - min) <= 2;\n        \n        return {\n            votes: votes,\n            summary: {\n                average: average,\n                median: median,\n                consensus: consensus,\n                total_votes: votes.length\n            }\n        };\n    },\n    \n    /**\n     * Generate unique session code\n     */\n    _generateSessionCode: function() {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n        var code = '';\n        for (var i = 0; i < 6; i++) {\n            code += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return code;\n    },\n    \n    /**\n     * Check if current user is facilitator for the session\n     */\n    _isFacilitator: function(sessionId) {\n        if (!sessionId) return false;\n        \n        var sessionGR = new GlideRecord('x_1447726_planni_0_planning_session');\n        if (!sessionGR.get(sessionId)) {\n            return false;\n        }\n        \n        return (gs.getUserID() === sessionGR.facilitator.toString());\n    },\n    \n    /**\n     * Return error response\n     */\n    _errorResponse: function(message) {\n        return JSON.stringify({\n            success: false,\n            message: message\n        });\n    },\n    \n    type: 'PlanningPokerAjax'\n});\n"
}

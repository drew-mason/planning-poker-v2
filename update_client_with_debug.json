{
  "client_script": "// Planning Poker Unified Interface - Client Script (Viewport Scaled)\n(function() {\n    'use strict';\n    \n    // Global variables\n    let currentSession = null;\n    let currentView = 'hub';\n    let selectedGroups = [];\n    let currentStory = null;\n    let scoringMethods = [];\n    let allGroups = [];\n    \n    // ==================== INITIALIZATION ====================\n    function initializePlanningPoker() {\n        console.log('üöÄ Initializing Planning Poker');\n        \n        try {\n            initializeTheme();\n            setupNavigationTabs();\n            setupFormHandlers();\n            setupButtonHandlers();\n            loadCurrentUser();\n            loadScoringMethods();\n            loadAllGroups();\n            \n            // Set initial view to hub and load sessions\n            showView('hub');\n            \n            console.log('‚úÖ Planning Poker initialized successfully');\n        } catch (error) {\n            console.error('‚ùå Error initializing Planning Poker:', error);\n        }\n    }\n    \n    // ==================== THEME MANAGEMENT ====================\n    function initializeTheme() {\n        console.log('üé® Initializing theme');\n        \n        // Check if dark mode should be enabled\n        const isDark = localStorage.getItem('color-theme') === 'dark' || \n                       (!localStorage.getItem('color-theme') && window.matchMedia('(prefers-color-scheme: dark)').matches);\n        \n        // Apply theme\n        if (isDark) {\n            document.documentElement.classList.add('dark');\n            // Show light icon (to switch to light mode)\n            const lightIcon = document.getElementById('theme-toggle-light-icon');\n            const darkIcon = document.getElementById('theme-toggle-dark-icon');\n            if (lightIcon) lightIcon.classList.remove('hidden');\n            if (darkIcon) darkIcon.classList.add('hidden');\n        } else {\n            document.documentElement.classList.remove('dark');\n            // Show dark icon (to switch to dark mode)\n            const lightIcon = document.getElementById('theme-toggle-light-icon');\n            const darkIcon = document.getElementById('theme-toggle-dark-icon');\n            if (lightIcon) lightIcon.classList.add('hidden');\n            if (darkIcon) darkIcon.classList.remove('hidden');\n        }\n        \n        // Setup theme toggle button\n        const themeToggle = document.getElementById('theme-toggle');\n        if (themeToggle) {\n            themeToggle.addEventListener('click', toggleTheme);\n        }\n    }\n    \n    function toggleTheme() {\n        console.log('üåì Toggling theme');\n        \n        const htmlElement = document.documentElement;\n        const lightIcon = document.getElementById('theme-toggle-light-icon');\n        const darkIcon = document.getElementById('theme-toggle-dark-icon');\n        \n        if (!lightIcon || !darkIcon) {\n            console.error('Theme toggle icons not found');\n            return;\n        }\n        \n        // Toggle dark class and icons\n        if (htmlElement.classList.contains('dark')) {\n            // Switch to light mode\n            htmlElement.classList.remove('dark');\n            lightIcon.classList.add('hidden');\n            darkIcon.classList.remove('hidden');\n            localStorage.setItem('color-theme', 'light');\n            console.log('Switched to light mode');\n        } else {\n            // Switch to dark mode\n            htmlElement.classList.add('dark');\n            darkIcon.classList.add('hidden');\n            lightIcon.classList.remove('hidden');\n            localStorage.setItem('color-theme', 'dark');\n            console.log('Switched to dark mode');\n        }\n    }\n    \n    // ==================== EVENT HANDLERS SETUP ====================\n    function setupFormHandlers() {\n        console.log('üìã Setting up form handlers');\n        \n        // Session form submission\n        const sessionForm = document.getElementById('create-session-form');\n        if (sessionForm) {\n            sessionForm.addEventListener('submit', window.createSession);\n        }\n        \n        // Modal close buttons\n        const closeModalBtn = document.getElementById('close-modal-btn');\n        const cancelSessionBtn = document.getElementById('cancel-session-btn');\n        if (closeModalBtn) closeModalBtn.addEventListener('click', window.hideCreateSessionModal);\n        if (cancelSessionBtn) cancelSessionBtn.addEventListener('click', window.hideCreateSessionModal);\n        \n        // Add participant button\n        const addGroupBtn = document.getElementById('add-group-btn');\n        if (addGroupBtn) {\n            addGroupBtn.addEventListener('click', window.addGroup);\n        }\n        \n        // Close modal on overlay click\n        const createSessionModal = document.getElementById('create-session-modal');\n        if (createSessionModal) {\n            createSessionModal.addEventListener('click', function(e) {\n                if (e.target === this) {\n                    window.hideCreateSessionModal();\n                }\n            });\n        }\n    }\n    \n    function setupButtonHandlers() {\n        console.log('üîò Setting up button handlers');\n        \n        // Create new session button\n        const createSessionBtn = document.getElementById('create-new-session-btn');\n        if (createSessionBtn) {\n            createSessionBtn.addEventListener('click', window.showCreateSessionModal);\n        }\n        \n        // Join session button\n        const joinSessionBtn = document.getElementById('join-session-btn');\n        if (joinSessionBtn) {\n            joinSessionBtn.addEventListener('click', function() {\n                const sessionCode = document.getElementById('session-code-input').value;\n                if (sessionCode) {\n                    window.joinSessionByCode(sessionCode);\n                } else {\n                    alert('Please enter a session code');\n                }\n            });\n        }\n        \n        // Join session on Enter key\n        const sessionCodeInput = document.getElementById('session-code-input');\n        if (sessionCodeInput) {\n            sessionCodeInput.addEventListener('keypress', function(e) {\n                if (e.key === 'Enter') {\n                    const sessionCode = this.value;\n                    if (sessionCode) {\n                        window.joinSessionByCode(sessionCode);\n                    } else {\n                        alert('Please enter a session code');\n                    }\n                }\n            });\n        }\n        \n        // Refresh sessions button\n        const refreshSessionsBtn = document.getElementById('refresh-sessions-btn');\n        if (refreshSessionsBtn) {\n            refreshSessionsBtn.addEventListener('click', function() {\n                loadAvailableSessions();\n            });\n        }\n    }\n    \n    // ==================== NAVIGATION ====================\n    function setupNavigationTabs() {\n        console.log('üîß Setting up navigation tabs');\n        \n        const navTabs = document.querySelectorAll('.nav-tab');\n        navTabs.forEach(function(tab) {\n            tab.addEventListener('click', function(e) {\n                e.preventDefault();\n                const viewName = this.getAttribute('data-view');\n                if (viewName) {\n                    showView(viewName);\n                }\n            });\n        });\n    }\n    \n    function showView(viewName) {\n        console.log('üìÑ Showing view:', viewName);\n        currentView = viewName;\n        \n        // Update active tab\n        document.querySelectorAll('.nav-tab').forEach(function(tab) {\n            tab.classList.remove('active');\n        });\n        \n        // Show selected tab as active\n        const activeTab = document.querySelector('[data-view=\"' + viewName + '\"]');\n        if (activeTab) {\n            activeTab.classList.add('active');\n        }\n        \n        // Hide all views\n        document.querySelectorAll('.view-section').forEach(function(section) {\n            section.classList.remove('active');\n        });\n        \n        // Show selected view\n        const selectedView = document.getElementById(viewName + '-view');\n        if (selectedView) {\n            selectedView.classList.add('active');\n        }\n        \n        // Update session context\n        const sessionContext = document.getElementById('session-context');\n        if (sessionContext) {\n            switch (viewName) {\n                case 'hub':\n                    sessionContext.textContent = 'Session Hub';\n                    break;\n                case 'facilitator':\n                    sessionContext.textContent = 'Facilitator Mode';\n                    break;\n                case 'voter':\n                    sessionContext.textContent = 'Voter Mode';\n                    break;\n                case 'observer':\n                    sessionContext.textContent = 'Observer Mode';\n                    break;\n                default:\n                    sessionContext.textContent = 'Session Hub';\n            }\n        }\n        \n        // Load view-specific data\n        loadViewData(viewName);\n    }\n    \n    function loadViewData(viewName) {\n        console.log('üìä Loading data for view:', viewName);\n        \n        switch (viewName) {\n            case 'hub':\n                loadAvailableSessions();\n                break;\n            case 'facilitator':\n                if (currentSession) {\n                    loadFacilitatorView();\n                }\n                break;\n            case 'voter':\n                if (currentSession) {\n                    loadVoterView();\n                }\n                break;\n            case 'observer':\n                if (currentSession) {\n                    loadObserverView();\n                }\n                break;\n        }\n    }\n    \n    // ==================== USER MANAGEMENT ====================\n    function loadCurrentUser() {\n        console.log('üë§ Loading current user');\n        \n        // Check if we're in ServiceNow platform\n        if (typeof GlideAjax === 'undefined') {\n            console.warn('‚ö†Ô∏è GlideAjax not available - not in ServiceNow context');\n            \n            // Try to use window.NOW or other ServiceNow globals\n            if (window.NOW && window.NOW.user) {\n                console.log('Using window.NOW.user');\n                displayCurrentUser({\n                    sys_id: window.NOW.user.userID || 'unknown',\n                    display_name: window.NOW.user.name || window.NOW.user.userName || 'User',\n                    user_name: window.NOW.user.userName || 'user',\n                    email: window.NOW.user.email || ''\n                });\n                return;\n            }\n            \n            // Fallback to mock data for testing\n            console.log('Using mock user data for testing');\n            displayCurrentUser({\n                sys_id: 'mock_user',\n                display_name: 'Test User',\n                user_name: 'testuser',\n                email: 'testuser@example.com'\n            });\n            return;\n        }\n        \n        console.log('üîÑ Making AJAX call to get current user');\n        const ajax = new GlideAjax('PlanningPokerAjax');\n        ajax.addParam('sysparm_name', 'getCurrentUser');\n        ajax.getXMLAnswer(function(answer) {\n            try {\n                console.log('üì• Raw user response:', answer);\n                console.log('üì• Response type:', typeof answer);\n                console.log('üì• Response length:', answer ? answer.length : 0);\n                \n                if (!answer || answer === 'null' || answer === '' || answer === 'undefined') {\n                    console.error('‚ùå Empty or invalid user response');\n                    setDefaultUserInfo();\n                    return;\n                }\n                \n                const userData = JSON.parse(answer);\n                console.log('‚úÖ Parsed user data successfully:', userData);\n                \n                if (userData && (userData.sys_id || userData.user_name || userData.display_name)) {\n                    displayCurrentUser(userData);\n                } else {\n                    console.error('‚ùå Invalid user data structure:', userData);\n                    setDefaultUserInfo();\n                }\n            } catch (error) {\n                console.error('‚ùå Error parsing user data:', error);\n                console.error('Raw answer was:', answer);\n                setDefaultUserInfo();\n            }\n        });\n    }\n    \n    function displayCurrentUser(userData) {\n        console.log('‚ú® Displaying user information:', userData);\n        console.log('üìù User data keys:', Object.keys(userData));\n        \n        const currentUserEl = document.getElementById('current-user');\n        const userAvatarEl = document.getElementById('user-avatar');\n        const roleDisplay = document.getElementById('role-display');\n        \n        console.log('üéØ Elements found:', {\n            currentUserEl: !!currentUserEl,\n            userAvatarEl: !!userAvatarEl,\n            roleDisplay: !!roleDisplay\n        });\n        \n        const displayName = userData.display_name || userData.user_name || 'User';\n        console.log('üë§ Display name:', displayName);\n        \n        // Update name display\n        if (currentUserEl) {\n            currentUserEl.textContent = displayName;\n            console.log('‚úÖ Updated current-user element');\n        } else {\n            console.error('‚ùå current-user element not found!');\n        }\n        \n        // Update role display with user name or email\n        if (roleDisplay) {\n            roleDisplay.textContent = userData.user_name || userData.email || 'User';\n            console.log('‚úÖ Updated role-display element');\n        } else {\n            console.error('‚ùå role-display element not found!');\n        }\n        \n        // Update avatar with proper initials\n        if (userAvatarEl) {\n            const initials = getInitials(displayName);\n            console.log('üî§ Generated initials:', initials);\n            userAvatarEl.textContent = initials;\n            \n            // Add a color based on the user name for variety\n            const colors = [\n                'bg-indigo-600', 'bg-blue-600', 'bg-purple-600', \n                'bg-pink-600', 'bg-red-600', 'bg-orange-600',\n                'bg-yellow-600', 'bg-green-600', 'bg-teal-600', 'bg-cyan-600'\n            ];\n            const colorIndex = getHashCode(displayName) % colors.length;\n            console.log('üé® Selected color index:', colorIndex, '‚Üí', colors[colorIndex]);\n            \n            // Remove all color classes first\n            colors.forEach(function(color) {\n                userAvatarEl.classList.remove(color);\n            });\n            \n            // Add the selected color\n            userAvatarEl.classList.add(colors[colorIndex]);\n            console.log('‚úÖ Updated user-avatar element with color');\n        } else {\n            console.error('‚ùå user-avatar element not found!');\n        }\n        \n        console.log('‚úÖ User display update complete');\n    }\n    \n    function getInitials(name) {\n        if (!name) return 'U';\n        \n        const words = name.trim().split(/\\s+/);\n        \n        if (words.length === 1) {\n            // Single word, return first 2 characters\n            return name.substring(0, 2).toUpperCase();\n        } else {\n            // Multiple words, return first letter of first two words\n            return (words[0].charAt(0) + words[1].charAt(0)).toUpperCase();\n        }\n    }\n    \n    function getHashCode(str) {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return Math.abs(hash);\n    }\n    \n    function setDefaultUserInfo() {\n        const currentUserEl = document.getElementById('current-user');\n        const userAvatarEl = document.getElementById('user-avatar');\n        if (currentUserEl) currentUserEl.textContent = 'User';\n        if (userAvatarEl) userAvatarEl.textContent = 'U';\n    }\n    \n    // ==================== DATA LOADING ====================\n    function loadScoringMethods() {\n        console.log('üî¢ Loading scoring methods');\n        \n        if (typeof GlideAjax === 'undefined') {\n            console.log('‚ö†Ô∏è Using mock scoring methods');\n            scoringMethods = [\n                { value: 'fibonacci', label: 'Fibonacci (1, 2, 3, 5, 8, 13, 21)' },\n                { value: 'sequential', label: 'Sequential (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)' },\n                { value: 'tshirt', label: 'T-Shirt Sizes (XS, S, M, L, XL, XXL)' }\n            ];\n            displayScoringMethods(scoringMethods);\n            return;\n        }\n        \n        const ajax = new GlideAjax('PlanningPokerAjax');\n        ajax.addParam('sysparm_name', 'getScoringMethods');\n        ajax.getXMLAnswer(function(answer) {\n            try {\n                const response = JSON.parse(answer);\n                if (response.success && response.methods) {\n                    scoringMethods = response.methods;\n                    displayScoringMethods(response.methods);\n                } else {\n                    console.error('Failed to load scoring methods:', response.message);\n                    // Use fallback methods\n                    scoringMethods = [\n                        { value: 'fibonacci', label: 'Fibonacci (1, 2, 3, 5, 8, 13, 21)' },\n                        { value: 'sequential', label: 'Sequential (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)' },\n                        { value: 'tshirt', label: 'T-Shirt Sizes (XS, S, M, L, XL, XXL)' }\n                    ];\n                    displayScoringMethods(scoringMethods);\n                }\n            } catch (error) {\n                console.error('Error parsing scoring methods response:', error);\n                // Use fallback methods\n                scoringMethods = [\n                    { value: 'fibonacci', label: 'Fibonacci (1, 2, 3, 5, 8, 13, 21)' },\n                    { value: 'sequential', label: 'Sequential (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)' },\n                    { value: 'tshirt', label: 'T-Shirt Sizes (XS, S, M, L, XL, XXL)' }\n                ];\n                displayScoringMethods(scoringMethods);\n            }\n        });\n    }\n    \n    function displayScoringMethods(methods) {\n        console.log('üìã Displaying scoring methods:', methods.length);\n        \n        const select = document.getElementById('scoring-method');\n        if (!select) return;\n        \n        select.innerHTML = '<option value=\"\">Select scoring method...</option>';\n        methods.forEach(function(method) {\n            const option = document.createElement('option');\n            option.value = method.value;\n            option.textContent = method.label;\n            select.appendChild(option);\n        });\n    }\n    \n    function loadAllGroups() {\n        console.log('üë• Loading all groups');\n        \n        if (typeof GlideAjax === 'undefined') {\n            console.log('‚ö†Ô∏è Using mock groups');\n            allGroups = [\n                { sys_id: 'group1', name: 'Development Team', description: 'Main development team' },\n                { sys_id: 'group2', name: 'Product Owners', description: 'Product owner group' },\n                { sys_id: 'group3', name: 'Scrum Masters', description: 'Scrum master group' }\n            ];\n            displayAllGroups(allGroups);\n            return;\n        }\n        \n        const ajax = new GlideAjax('PlanningPokerAjax');\n        ajax.addParam('sysparm_name', 'getAllGroups');\n        ajax.getXMLAnswer(function(answer) {\n            try {\n                const response = JSON.parse(answer);\n                if (response.success && response.groups) {\n                    allGroups = response.groups;\n                    displayAllGroups(response.groups);\n                } else {\n                    console.error('Failed to load groups:', response.message);\n                    allGroups = [];\n                    displayAllGroups([]);\n                }\n            } catch (error) {\n                console.error('Error parsing groups response:', error);\n                allGroups = [];\n                displayAllGroups([]);\n            }\n        });\n    }\n    \n    function displayAllGroups(groups) {\n        console.log('ÔøΩ Displaying groups:', groups.length);\n        \n        const select = document.getElementById('group-select');\n        if (!select) return;\n        \n        select.innerHTML = '<option value=\"\">Select group to add...</option>';\n        groups.forEach(function(group) {\n            const option = document.createElement('option');\n            option.value = group.sys_id;\n            option.textContent = group.name + (group.description ? ' - ' + group.description : '');\n            select.appendChild(option);\n        });\n    }\n    \n    // ==================== SESSIONS MANAGEMENT ====================\n    function loadAvailableSessions() {\n        console.log('üìã Loading available sessions');\n        \n        if (typeof GlideAjax === 'undefined') {\n            console.log('‚ö†Ô∏è Using mock sessions');\n            displayAvailableSessions([\n                {\n                    sys_id: 'session1',\n                    title: 'Sprint Planning - User Stories',\n                    description: 'Planning session for upcoming sprint stories',\n                    created_by_name: 'John Doe',\n                    scoring_method_name: 'Fibonacci',\n                    participant_count: 5,\n                    story_count: 8,\n                    status: 'active',\n                    sys_created_on: '2024-01-15 10:30:00'\n                }\n            ]);\n            return;\n        }\n        \n        const ajax = new GlideAjax('PlanningPokerAjax');\n        ajax.addParam('sysparm_name', 'getAllSessions');\n        ajax.getXMLAnswer(function(answer) {\n            try {\n                const response = JSON.parse(answer);\n                if (response.success && response.sessions) {\n                    displayAvailableSessions(response.sessions);\n                } else {\n                    console.error('Failed to load sessions:', response.message);\n                    displayAvailableSessions([]);\n                }\n            } catch (error) {\n                console.error('Error parsing sessions response:', error);\n                displayAvailableSessions([]);\n            }\n        });\n    }\n    \n    function displayAvailableSessions(sessions) {\n        console.log('üóÇÔ∏è Displaying sessions:', sessions.length);\n        \n        const grid = document.getElementById('sessions-grid');\n        const noSessions = document.getElementById('no-sessions');\n        \n        if (!grid) return;\n        \n        if (sessions.length === 0) {\n            if (noSessions) noSessions.classList.remove('hidden');\n            grid.innerHTML = '';\n            return;\n        }\n        \n        if (noSessions) noSessions.classList.add('hidden');\n        \n        grid.innerHTML = sessions.map(function(session) {\n            return createSessionCard(session);\n        }).join('');\n    }\n    \n    function createSessionCard(session) {\n        const statusClass = getStatusClass(session.status);\n        const statusText = getStatusText(session.status);\n        \n        return '<div class=\"session-card bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 cursor-pointer hover:shadow-lg transition-shadow duration-200\" onclick=\"joinSession(\\'' + session.sys_id + '\\')\">' +\n            '<div class=\"flex justify-between items-start mb-3\">' +\n            '<h4 class=\"font-semibold text-gray-900 dark:text-white text-sm\">' + escapeHtml(session.title || session.name || 'Untitled Session') + '</h4>' +\n            '<span class=\"status-badge ' + statusClass + ' text-white text-xs px-2 py-1 rounded-full ml-2\">' + statusText + '</span>' +\n            '</div>' +\n            '<p class=\"text-gray-600 dark:text-gray-300 text-xs mb-3\">' + escapeHtml(session.description || 'No description provided') + '</p>' +\n            '<div class=\"space-y-1 text-xs text-gray-500 dark:text-gray-400\">' +\n            '<div class=\"flex justify-between\"><span>Facilitator:</span><span class=\"font-medium\">' + escapeHtml(session.created_by_name || session.facilitator_name || 'Unknown') + '</span></div>' +\n            '<div class=\"flex justify-between\"><span>Method:</span><span class=\"font-medium\">' + escapeHtml(session.scoring_method_name || 'Not specified') + '</span></div>' +\n            '<div class=\"flex justify-between\"><span>Participants:</span><span class=\"font-medium\">' + (session.participant_count || 0) + '</span></div>' +\n            '<div class=\"flex justify-between\"><span>Created:</span><span class=\"font-medium\">' + formatDate(session.sys_created_on) + '</span></div>' +\n            '</div>' +\n            '</div>';\n    }\n    \n    // ==================== UTILITY FUNCTIONS ====================\n    function escapeHtml(text) {\n        if (!text) return '';\n        const map = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;'\n        };\n        return text.toString().replace(/[&<>\"']/g, function(m) { return map[m]; });\n    }\n    \n    function getStatusClass(status) {\n        switch (status) {\n            case 'active': return 'active';\n            case 'completed': return 'completed';\n            default: return 'pending';\n        }\n    }\n    \n    function getStatusText(status) {\n        switch (status) {\n            case 'active': return 'Active';\n            case 'completed': return 'Completed';\n            default: return 'Pending';\n        }\n    }\n    \n    function formatDate(dateString) {\n        if (!dateString) return 'Unknown';\n        try {\n            const date = new Date(dateString);\n            return date.toLocaleDateString('en-US', {\n                month: 'short',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit'\n            });\n        } catch (e) {\n            return 'Unknown';\n        }\n    }\n    \n    // ==================== GLOBAL FUNCTIONS ====================\n    window.addGroup = function() {\n        const select = document.getElementById('group-select');\n        \n        if (!select) return;\n        \n        const groupId = select.value;\n        const groupName = select.options[select.selectedIndex].text;\n        \n        if (!groupId) {\n            alert('Please select a group');\n            return;\n        }\n        \n        // Check if already added\n        const exists = selectedGroups.some(function(g) {\n            return g.group_id === groupId;\n        });\n        \n        if (exists) {\n            alert('Group already added to this session');\n            return;\n        }\n        \n        selectedGroups.push({\n            group_id: groupId,\n            group_name: groupName\n        });\n        \n        updateSelectedGroupsList();\n        \n        // Reset selection\n        select.value = '';\n    };\n    \n    function updateSelectedGroupsList() {\n        const container = document.getElementById('selected-groups');\n        if (!container) return;\n        \n        container.innerHTML = selectedGroups.map(function(group, index) {\n            return '<div class=\"flex justify-between items-center bg-gray-50 dark:bg-gray-700 p-[1.5vw] rounded text-[1.2vw] lg:text-[1vw] xl:text-[0.9vw]\">' +\n                '<span class=\"font-medium\">' + escapeHtml(group.group_name) + '</span>' +\n                '<button type=\"button\" onclick=\"removeGroup(' + index + ')\" class=\"text-red-600 hover:text-red-800 text-[1.1vw] lg:text-[0.9vw] xl:text-[0.8vw] font-medium\">Remove</button>' +\n                '</div>';\n        }).join('');\n    }\n    \n    window.removeGroup = function(index) {\n        selectedGroups.splice(index, 1);\n        updateSelectedGroupsList();\n    };\n    \n    // ==================== SESSION ACTIONS ====================\n    window.showCreateSessionModal = function() {\n        console.log('üìù Showing create session modal');\n        const modal = document.getElementById('create-session-modal');\n        if (modal) {\n            modal.classList.remove('hidden');\n            modal.classList.remove('opacity-0');\n            modal.classList.add('opacity-100');\n            \n            // Focus on session name input\n            setTimeout(function() {\n                const sessionNameInput = document.getElementById('session-name');\n                if (sessionNameInput) sessionNameInput.focus();\n            }, 100);\n        }\n    };\n    \n    window.hideCreateSessionModal = function() {\n        console.log('‚úñÔ∏è Hiding create session modal');\n        const modal = document.getElementById('create-session-modal');\n        if (modal) {\n            modal.classList.add('opacity-0');\n            setTimeout(function() {\n                modal.classList.add('hidden');\n            }, 300);\n        }\n        \n        // Reset form and participants\n        const form = document.getElementById('create-session-form');\n        if (form) form.reset();\n        selectedGroups = [];\n        updateSelectedGroupsList();\n    };\n    \n    window.createSession = function(event) {\n        event.preventDefault();\n        console.log('üéØ Creating new session');\n        \n        const form = document.getElementById('create-session-form');\n        if (!form) {\n            console.error('Session form not found');\n            return;\n        }\n        \n        const formData = new FormData(form);\n        const title = formData.get('session-name');\n        const description = formData.get('session-description');\n        const scoringMethod = formData.get('scoring-method');\n        \n        if (!title || !scoringMethod) {\n            alert('Please fill in all required fields');\n            return;\n        }\n        \n        const sessionData = {\n            title: title,\n            description: description,\n            scoring_method: scoringMethod,\n            groups: selectedGroups\n        };\n        \n        console.log('Session data:', sessionData);\n        \n        if (typeof GlideAjax === 'undefined') {\n            console.log('‚ö†Ô∏è Mock session creation');\n            alert('Session \"' + title + '\" created successfully (mock mode)');\n            window.hideCreateSessionModal();\n            loadAvailableSessions();\n            return;\n        }\n        \n        const ajax = new GlideAjax('PlanningPokerAjax');\n        ajax.addParam('sysparm_name', 'createSession');\n        ajax.addParam('sysparm_session_data', JSON.stringify(sessionData));\n        ajax.getXMLAnswer(function(answer) {\n            try {\n                const response = JSON.parse(answer);\n                if (response.success) {\n                    alert('Session created successfully!');\n                    window.hideCreateSessionModal();\n                    loadAvailableSessions(); // Refresh sessions\n                    \n                    // Optionally switch to facilitator view\n                    currentSession = response.session;\n                    showView('facilitator');\n                } else {\n                    alert('Failed to create session: ' + (response.message || 'Unknown error'));\n                }\n            } catch (error) {\n                console.error('Error creating session:', error);\n                alert('Error creating session');\n            }\n        });\n    };\n    \n    window.joinSessionByCode = function(sessionCode) {\n        console.log('üîë Joining session by code:', sessionCode);\n        \n        if (typeof GlideAjax === 'undefined') {\n            console.log('‚ö†Ô∏è Mock session join by code');\n            alert('Joining session with code: ' + sessionCode + ' (mock mode)');\n            return;\n        }\n        \n        const ajax = new GlideAjax('PlanningPokerAjax');\n        ajax.addParam('sysparm_name', 'joinSession');\n        ajax.addParam('sysparm_session_code', sessionCode);\n        ajax.getXMLAnswer(function(answer) {\n            try {\n                const response = JSON.parse(answer);\n                if (response.success) {\n                    currentSession = response.session;\n                    alert('Successfully joined session: ' + response.session.session_name);\n                    \n                    // Navigate to appropriate view based on role\n                    if (response.role === 'facilitator') {\n                        showView('facilitator');\n                    } else if (response.role === 'observer') {\n                        showView('observer');\n                    } else {\n                        showView('voter');\n                    }\n                } else {\n                    alert('Failed to join session: ' + (response.message || 'Session not found'));\n                }\n            } catch (error) {\n                console.error('Error joining session:', error);\n                alert('Error joining session');\n            }\n        });\n    };\n    \n    window.joinSession = function(sessionId) {\n        console.log('üéØ Joining session:', sessionId);\n        alert('Joining session: ' + sessionId + '\\n(Full implementation coming soon)');\n    };\n    \n    // ==================== MOCK FUNCTIONS FOR OTHER VIEWS ====================\n    function loadFacilitatorView() {\n        console.log('üëî Loading facilitator view');\n        const storyTitle = document.getElementById('storyTitle');\n        const storyDescription = document.getElementById('storyDescription');\n        \n        if (currentSession && storyTitle && storyDescription) {\n            storyTitle.textContent = 'Current Session: ' + currentSession.session_name;\n            storyDescription.textContent = 'Facilitating planning poker session';\n        }\n    }\n    \n    function loadVoterView() {\n        console.log('üó≥Ô∏è Loading voter view');\n        const voterStoryTitle = document.getElementById('voter-story-title');\n        const voterStoryDescription = document.getElementById('voter-story-description');\n        \n        if (currentSession && voterStoryTitle && voterStoryDescription) {\n            voterStoryTitle.textContent = 'Session: ' + currentSession.session_name;\n            voterStoryDescription.textContent = 'Ready to vote on user stories';\n        }\n    }\n    \n    function loadObserverView() {\n        console.log('üëÅÔ∏è Loading observer view');\n        const observerHeader = document.getElementById('observer-story-content-header');\n        \n        if (currentSession && observerHeader) {\n            observerHeader.textContent = 'Observing: ' + currentSession.session_name;\n        }\n    }\n    \n    // ==================== INITIALIZATION ====================\n    // Initialize when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializePlanningPoker);\n    } else {\n        initializePlanningPoker();\n    }\n    \n})();"
}
